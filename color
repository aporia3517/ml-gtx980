{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": [
       "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\n"
      ],
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f859a5b11d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "original RGB:  240 230 175\n",
      "by HSV:  ['Light stone grey', '229', '228', '222']\n",
      "by HSV1:  ['Light brick yellow', '240', '213', '160']\n",
      "by YUV:  ['Light yellow', '249', '233', '153']\n",
      "by RGB:  ['Light brick yellow', '240', '213', '160']\n"
     ]
    },
    {
     "data": {
      "image/png": [
       "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\n"
      ],
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f85b408c250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "original RGB:  100 200 230\n",
      "by HSV:  ['Med. bluish green', '85', '165', '175']\n",
      "by HSV1:  ['Tr. Blue', '123', '182', '232']\n",
      "by YUV:  ['Dove blue', '125', '187', '221']\n",
      "by RGB:  ['Tr. Blue', '123', '182', '232']\n"
     ]
    },
    {
     "data": {
      "image/png": [
       "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\n"
      ],
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f859a24a250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "original RGB:  75 210 30\n",
      "by HSV:  ['Light green', '194', '218', '184']\n",
      "by HSV1:  ['Br. yellowish green', '164', '189', '70']\n",
      "by YUV:  ['Bright green', '75', '151', '74']\n",
      "by RGB:  ['Bright green', '75', '151', '74']\n"
     ]
    },
    {
     "data": {
      "image/png": [
       "iVBORw0KGgoAAAANSUhEUgAAAQcAAAEACAYAAAC+rrMfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\n",
       "AAALEgAACxIB0t1+/AAADTNJREFUeJzt3X+o3Xd9x/Hna2kVKuuqREpJ48I0xHbYoq0xVTbjFBbL\n",
       "sOBgJXaCv7DCIsP9YZ2CLYw6BqIilS4tbfEPMX/oYJn2Bw4NitRiOtPWmdRE7UjSUFp/IdI/Enzv\n",
       "j3ua3Z6+c8+55557zr3u+YDC+Z7zyfe+e7nneb/nmy/fpKqQpGF/MO8BJK1NxkFSyzhIahkHSS3j\n",
       "IKllHCS1RsYhyd1Jnkry2BJrPp/kaJJHkrx2uiNKmodxjhzuAXad68Uk1wKvqqqtwAeB26c0m6Q5\n",
       "GhmHqvoO8MsllrwD+OJg7UPARUkuns54kuZlGuccNgHHF22fAC6dwn4lzdG0TkhmaNtrsqV17rwp\n",
       "7OMksHnR9qWD554nicGQ5qSqhn+BjzSNOOwH9gD7kuwAflVVT3ULJxlwnpLcUlW3zHuOca23ecGZ\n",
       "Z2HSX8wj45Dky8CbgY1JjgM3A+cDVNXeqro3ybVJjgG/Bd47ySCS1paRcaiq3WOs2TOdcSStFV4h\n",
       "ubQD8x5gmQ7Me4AJHJj3ABM4MO8BZiGzutlLklpv5xyk3weTvvc8cpDUMg6SWsZBUss4SGoZB0kt\n",
       "4yCpZRwktYyDpJZxkNQyDpJaxkFSyzhIahkHSS3jIKllHCS1jIOklnGQ1DIOklrGQVLLOEhqGQdJ\n",
       "LeMgqWUcJLWMg6SWcZDUMg6SWsZBUss4SGoZB0kt4yCpZRwktYyDpJZxkNQyDpJaI+OQZFeSI0mO\n",
       "JrmpeX1jkvuTHErywyTvWZVJJc1UqurcLyYbgMeBtwEnge8Du6vq8KI1twAvrqp/TLJxsP7iqjoz\n",
       "tK+qqkz/f0HSUiZ97406ctgOHKuqJ6rqNLAPuG5ozSngwsHjC4GfD4dB0vpz3ojXNwHHF22fAN4w\n",
       "tOZO4JtJngT+EPib6Y0naV5GxeHcnzn+z8eBQ1W1M8krgW8kubKqfjO8cPAR5DkHqurA2JNKGkuS\n",
       "ncDOle5nVBxOApsXbW9m4ehhsTcCtwJU1U+S/AzYBhwc3llV3TLxpJLGMvile+C57SQ3T7KfUecc\n",
       "DgJbk2xJ8iLgemD/0JojLJywJMnFLIThp5MMI2ntWPLIoarOJNkDPABsAO6qqsNJbhy8vhf4FHBP\n",
       "kkdYiM1Hq+oXqzy3pFW25F9lTvUL+VeZ0lys1l9lSvp/yjhIahkHSS3jIKllHCS1jIOklnGQ1DIO\n",
       "klrGQVLLOEhqGQdJLeMgqWUcJLWMg6SWcZDUMg6SWsZBUss4SGqNuvv0VCWZzT3pJK3YTOPwtVf/\n",
       "zyy/3Ir91ZE/5u9e94l5jzG2L/zXrTz8vn+d9xjLctXdH+Izf3HrvMdYln/45ifW1ff5qrs/NNGf\n",
       "82OFpJZxkNQyDpJaxkFSyzhIahkHSS3jIKllHCS1jIOklnGQ1DIOklrGQVLLOEhqGQdJLeMgqTUy\n",
       "Dkl2JTmS5GiSm86xZmeSHyT5YZIDU59S0swtebOXJBuA24C3ASeB7yfZX1WHF625CPgC8JdVdSLJ\n",
       "xtUcWNJsjDpy2A4cq6onquo0sA+4bmjNu4CvVtUJgKp6ZvpjSpq1UXHYBBxftH1i8NxiW4GXJflW\n",
       "koNJ3j3NASXNx6h7SI5zQ9jzgdcBbwUuAB5M8r2qOrrS4STNz6g4nAQ2L9rezMLRw2LHgWeq6lng\n",
       "2STfBq4EXhCHLz392bOPX3PBDq54yTWTzCxpCQdPPc7Dp3684v2MisNBYGuSLcCTwPXA7qE1/w7c\n",
       "Njh5+WLgDcBnup3d8PKPrGRWSWO4+pJtXH3JtrPbdxz6+kT7WTIOVXUmyR7gAWADcFdVHU5y4+D1\n",
       "vVV1JMn9wKPA74A7q+pHE00jac0Y+e9WVNV9wH1Dz+0d2v408OnpjiZpnrxCUlLLOEhqGQdJLeMg\n",
       "qWUcJLWMg6SWcZDUMg6SWsZBUss4SGoZB0kt4yCpZRwktYyDpJZxkNQyDpJaxkFSyzhIahkHSS3j\n",
       "IKllHCS1jIOklnGQ1DIOklrGQVLLOEhqGQdJLeMgqWUcJLWMg6SWcZDUMg6SWsZBUss4SGoZB0kt\n",
       "4yCpNTIOSXYlOZLkaJKbllj3+iRnkrxzuiNKmocl45BkA3AbsAu4HNid5LJzrPsX4H4gqzCnpBkb\n",
       "deSwHThWVU9U1WlgH3Bds+7DwFeAp6c8n6Q5GRWHTcDxRdsnBs+dlWQTC8G4ffBUTW06SXMzKg7j\n",
       "vNE/B3ysqoqFjxR+rJB+D5w34vWTwOZF25tZOHpY7CpgXxKAjcDbk5yuqv3DO/vS0589+/g1F+zg\n",
       "ipdcM8nMkpZw8NTjPHzqxyvez6g4HAS2JtkCPAlcD+xevKCq/uS5x0nuAf6jCwPADS//yEpmlTSG\n",
       "qy/ZxtWXbDu7fcehr0+0nyXjUFVnkuwBHgA2AHdV1eEkNw5e3zvRV5W05o06cqCq7gPuG3qujUJV\n",
       "vXdKc0maM6+QlNQyDpJaxkFSyzhIahkHSS3jIKllHCS1jIOklnGQ1DIOklrGQVLLOEhqGQdJLeMg\n",
       "qWUcJLWMg6SWcZDUMg6SWsZBUss4SGoZB0kt4yCpZRwktYyDpJZxkNQyDpJaxkFSyzhIahkHSS3j\n",
       "IKllHCS1jIOklnGQ1DIOklrGQVLLOEhqjRWHJLuSHElyNMlNzes3JHkkyaNJvpvkiumPKmmWRsYh\n",
       "yQbgNmAXcDmwO8llQ8t+Cvx5VV0B/BNwx7QHlTRb4xw5bAeOVdUTVXUa2Adct3hBVT1YVb8ebD4E\n",
       "XDrdMSXN2jhx2AQcX7R9YvDcubwfuHclQ0mav/PGWFPj7izJW4D3AW/qXv/S0589+/g1F+zgipdc\n",
       "M+6uJY3p4KnHefjUj1e8n3HicBLYvGh7MwtHD88zOAl5J7Crqn7Z7eiGl39kkhklLcPVl2zj6ku2\n",
       "nd2+49DXJ9rPOB8rDgJbk2xJ8iLgemD/4gVJXgH8G/C3VXVsokkkrSkjjxyq6kySPcADwAbgrqo6\n",
       "nOTGwet7gU8CLwVuTwJwuqq2r97YklbbOB8rqKr7gPuGntu76PEHgA9MdzRJ8+QVkpJaxkFSyzhI\n",
       "ahkHSS3jIKllHCS1jIOklnGQ1DIOklrGQVLLOEhqGQdJLeMgqWUcJLWMg6SWcZDUMg6SWqka++bS\n",
       "K/tCyWy+kKQXqKos98+MdZu4aZlkQEkrM+kvZj9WSGoZB0kt4yCpZRwktYyDpJZxkNQyDpJaxkFS\n",
       "yzhIahkHSS3jIKllHCS1jIOklnGQ1DIOklrGQVJrZByS7EpyJMnRJDedY83nB68/kuS10x9T0qwt\n",
       "GYckG4DbgF3A5cDuJJcNrbkWeFVVbQU+CNy+SrPOXJKd855hOdbbvODMa9moI4ftwLGqeqKqTgP7\n",
       "gOuG1rwD+CJAVT0EXJTk4qlPOh875z3AMu2c9wAT2DnvASawc94DzMKoOGwCji/aPjF4btSaS1c+\n",
       "mqR5GhWHcW9MOXzjWO80La1zo+4+fRLYvGh7MwtHBkutuXTw3Ausx9vTJ7l53jMsx3qbF5x5rRoV\n",
       "h4PA1iRbgCeB64HdQ2v2A3uAfUl2AL+qqqeGd+Rt6aX1Zck4VNWZJHuAB4ANwF1VdTjJjYPX91bV\n",
       "vUmuTXIM+C3w3lWfWtKqm9m/eCVpfZn6FZLr7aKpUfMmuWEw56NJvpvkinnMOTTTyO/xYN3rk5xJ\n",
       "8s5ZztfMMc7PxM4kP0jywyQHZjxiN8+on4uNSe5Pcmgw83vmMObiee5O8lSSx5ZYs7z3XVVN7T8W\n",
       "PnocA7YA5wOHgMuG1lwL3Dt4/Abge9OcYRXmvQb4o8HjXfOcd9yZF637JvA14K/X8rzARcB/A5cO\n",
       "tjeu9e8xcAvwz8/NC/wcOG+OM/8Z8FrgsXO8vuz33bSPHNbbRVMj562qB6vq14PNh5j/NRzjfI8B\n",
       "Pgx8BXh6lsM1xpn3XcBXq+oEQFU9M+MZh40z8yngwsHjC4GfV9WZGc74PFX1HeCXSyxZ9vtu2nFY\n",
       "bxdNjTPvYu8H7l3ViUYbOXOSTSz8MD93Kfs8TyyN8z3eCrwsybeSHEzy7plN1xtn5juBP03yJPAI\n",
       "8Pczmm1Sy37fTftf2V5vF02N/XWTvAV4H/Cm1RtnLOPM/DngY1VVScILv9+zNM685wOvA94KXAA8\n",
       "mOR7VXV0VSc7t3Fm/jhwqKp2Jnkl8I0kV1bVb1Z5tpVY1vtu2nGY6kVTMzDOvAxOQt4J7KqqpQ7d\n",
       "ZmGcma9i4boTWPg8/PYkp6tq/2xGfJ5x5j0OPFNVzwLPJvk2cCUwrziMM/MbgVsBquonSX4GbGPh\n",
       "2qC1aPnvuymfFDkP+AkLJ3JexOgTkjuY7wnJceZ9BQsnp3bMa87lzjy0/h7gnWt5XuDVwH+ycCLw\n",
       "AuAx4PI1PvNngJsHjy9mIR4vm/PPxhbGOyE51vtuqkcOtc4umhpnXuCTwEuB2we/iU9X1fY1PvOa\n",
       "MebPxJEk9wOPAr8D7qyqH63lmYFPAfckeYSFc3cfrapfzGvmJF8G3gxsTHIcuJmFj2sTv++8CEpS\n",
       "y9vESWoZB0kt4yCpZRwktYyDpJZxkNQyDpJaxkFS638Bs9uZkSshMwEAAAAASUVORK5CYII=\n"
      ],
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f859a1995d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "original RGB:  180 40 225\n",
      "by HSV:  ['Bright violet', '107', '50', '123']\n",
      "by HSV1:  ['Bright purple', '205', '98', '152']\n",
      "by YUV:  ['Bright reddish lilac', '142', '66', '133']\n",
      "by RGB:  ['Bright purple', '205', '98', '152']\n"
     ]
    },
    {
     "data": {
      "image/png": [
       "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\n"
      ],
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f859a0ed250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "original RGB:  150 200 35\n",
      "by HSV:  ['Br. yellowish green', '164', '189', '70']\n",
      "by HSV1:  ['Med. yellowish green', '199', '210', '60']\n",
      "by YUV:  ['Br. yellowish green', '164', '189', '70']\n",
      "by RGB:  ['Br. yellowish green', '164', '189', '70']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nhttp://peeron.com/cgi-bin/invcgis/colorguide.cgi\\nhttp://matthiaseisen.com/pp/patterns/p0203/\\nhttp://www.easyrgb.com/index.php?X=MATH\\n'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "# -*- coding: utf-8 -*-\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as patches\n",
    "import sys, math\n",
    "lego_colors = [['White', '242', '243', '242'], ['Grey', '161', '165', '162'], ['Light yellow', '249', '233', '153'], ['Brick yellow', '215', '197', '153'], ['Light green', '194', '218', '184'], ['Light reddish violet', '232', '186', '199'], ['Light orange brown', '203', '132', '66'], ['Nougat', '204', '142', '104'], ['Bright red', '196', '40', '27'], ['Med. reddish violet', '196', '112', '160'], ['Bright blue', '13', '105', '171'], ['Bright yellow', '245', '205', '47'], ['Earth orange', '98', '71', '50'], ['Black', '27', '42', '52'], ['Dark grey', '109', '110', '108'], ['Dark green', '40', '127', '70'], ['Medium green', '161', '196', '139'], ['Lig. Yellowich orange', '243', '207', '155'], ['Bright green', '75', '151', '74'], ['Dark orange', '160', '95', '52'], ['Light bluish violet', '193', '202', '222'], ['Light blue', '180', '210', '227'], ['Light red', '238', '196', '182'], ['Medium red', '218', '134', '121'], ['Medium blue', '110', '153', '201'], ['Light grey', '199', '193', '183'], ['Bright violet', '107', '50', '123'], ['Br. yellowish orange', '226', '155', '63'], ['Bright orange', '218', '133', '64'], ['Bright bluish green', '0', '143', '155'], ['Earth yellow', '104', '92', '67'], ['Bright bluish violet', '67', '84', '147'], ['Medium bluish violet', '104', '116', '172'], ['Med. yellowish green', '199', '210', '60'], ['Med. bluish green', '85', '165', '175'], ['Light bluish green', '183', '215', '213'], ['Br. yellowish green', '164', '189', '70'], ['Lig. yellowish green', '217', '228', '167'], ['Med. yellowish orange', '231', '172', '88'], ['Br. reddish orange', '211', '111', '76'], ['Bright reddish violet', '146', '57', '120'], ['Light orange', '234', '184', '145'], ['Gold', '220', '188', '129'], ['Dark nougat', '174', '122', '89'], ['Silver', '156', '163', '168'], ['Sand blue', '116', '134', '156'], ['Sand violet', '135', '124', '144'], ['Medium orange', '224', '152', '100'], ['Sand yellow', '149', '138', '115'], ['Earth blue', '32', '58', '86'], ['Earth green', '39', '70', '44'], ['Sand blue metallic', '121', '136', '161'], ['Sand violet metallic', '149', '142', '163'], ['Sand yellow metallic', '147', '135', '103'], ['Dark grey metallic', '87', '88', '87'], ['Black metallic', '22', '29', '50'], ['Light grey metallic', '171', '173', '172'], ['Sand green', '120', '144', '129'], ['Sand red', '149', '121', '118'], ['Dark red', '123', '46', '47'], ['Gun metallic', '117', '108', '98'], ['Curry', '215', '169', '75'], ['Lemon metalic', '130', '138', '93'], ['Fire Yellow', '249', '214', '46'], ['Flame yellowish orange', '232', '171', '45'], ['Reddish brown', '105', '64', '39'], ['Flame reddish orange', '207', '96', '36'], ['Medium stone grey', '163', '162', '164'], ['Royal blue', '70', '103', '164'], ['Dark Royal blue', '35', '71', '139'], ['Bright reddish lilac', '142', '66', '133'], ['Dark stone grey', '99', '95', '97'], ['Light stone grey', '229', '228', '222'], ['Dark Curry', '176', '142', '68'], ['Faded green', '112', '149', '120'], ['Turquoise', '121', '181', '181'], ['Light Royal blue', '159', '195', '233'], ['Medium Royal blue', '108', '129', '183'], ['Rust', '143', '76', '42'], ['Brown', '124', '92', '69'], ['Reddish lilac', '150', '112', '159'], ['Lilac', '107', '98', '155'], ['Light lilac', '167', '169', '206'], ['Bright purple', '205', '98', '152'], ['Light purple', '228', '173', '200'], ['Light pink', '220', '144', '149'], ['Light brick yellow', '240', '213', '160'], ['Warm yellowish orange', '235', '184', '127'], ['Cool yellow', '253', '234', '140'], ['Dove blue', '125', '187', '221'], ['Medium lilac', '52', '43', '117'], ['Transparent', '236', '236', '236'], ['Tr. Red', '205', '84', '75'], ['Tr. Lg blue', '193', '223', '240'], ['Tr. Blue', '123', '182', '232'], ['Tr. Yellow', '247', '241', '141'], ['Tr. Flu. Reddish orange', '217', '133', '108'], ['Tr. Green', '132', '182', '141'], ['Tr. Flu. Green', '248', '241', '132'], ['Phosph. White', '236', '232', '222'], ['Tr. Brown', '191', '183', '177'], ['Tr. Medi. reddish violet', '228', '173', '200'], ['Tr. Bright bluish violet', '165', '165', '203'], ['Neon orange', '213', '115', '61'], ['Neon green', '216', '221', '86'], ['Tr. Flu. Blue', '207', '226', '247'], ['Tr. Flu. Yellow', '255', '246', '123'], ['Tr. Flu. Red', '225', '164', '194'], ['Red flip/flop', '151', '105', '91'], ['Yellow flip/flop', '180', '132', '85'], ['Silver flip/flop', '137', '135', '136']]\n",
    "\n",
    "def getYUV_fromRGB(r, g, b):\n",
    "    T = np.array([[0.299, 0.587, 0.114],[-0.14713, -0.28886, 0.436],[0.615, -0.51499, -0.10001]])\n",
    "    return tuple(np.dot(T, np.array([r,g,b])))\n",
    "\n",
    "def getRGB_fromYUV(Y, U, V):\n",
    "    T = np.array([[1, 0, 1.13983],[1, -0.39465, -0.58060],[1, 2.03211, 0]])\n",
    "    return tuple(int(round(x)) for x in np.dot(T, np.array([Y,U,V])))\n",
    "\n",
    "def getHSV_fromRGB(r, g, b):\n",
    "    r = r/255.\n",
    "    g = g/255.\n",
    "    b = b/255.\n",
    "    Cmax = max(r,g,b)\n",
    "    Cmin = min(r,g,b)\n",
    "    delta = Cmax - Cmin\n",
    "    if delta == 0:\n",
    "        H = 0\n",
    "    elif Cmax == r:\n",
    "        H = 60 * (((g - b) / delta) % 6)\n",
    "    elif Cmax == g:\n",
    "        H = 60 * (((b - r) / delta) + 2)\n",
    "    else:\n",
    "        H = 60 * (((r - g) / delta) + 4)\n",
    "    if Cmax == 0:\n",
    "        S = 0\n",
    "    else:\n",
    "        S = delta / Cmax\n",
    "    V = Cmax\n",
    "    return H, S, V\n",
    "\n",
    "def getRGB_fromHSV(H, S, V):\n",
    "    C = V * S\n",
    "    X = C * (1 - abs(((H/60) % 2) - 1))\n",
    "    m = V - C\n",
    "    if 0 <= H and H < 60:\n",
    "        r, g, b = C, X, 0\n",
    "    elif 60 <= H and H < 120:\n",
    "        r, g, b = X, C, 0\n",
    "    elif 120 <= H and H < 180:\n",
    "        r, g, b = 0, C, X\n",
    "    elif 180 <= H and H < 240:\n",
    "        r, g, b = 0, X, C\n",
    "    elif 240 <= H and H < 300:\n",
    "        r, g, b = X, 0, C\n",
    "    else:\n",
    "        r, g, b = C, 0, X\n",
    "    r, g, b = (r+m)*255, (g+m)*255, (b+m)*255\n",
    "    return int(round(r)), int(round(g)), int(round(b))\n",
    "\n",
    "def getNearestByHSV(r, g, b): # input: rgb\n",
    "    global lego_colors\n",
    "    h,s,v = getHSV_fromRGB(r,g,b)\n",
    "    i = -1\n",
    "    m = 1e9\n",
    "    for idx, color in enumerate(lego_colors):\n",
    "        h1,s1,v1 = getHSV_fromRGB(int(color[1]), int(color[2]), int(color[3]))\n",
    "        t = (h1-h)**2 + (s1-s)**2 + (v1-v)**2\n",
    "        if t < m:\n",
    "            m = t\n",
    "            i = idx\n",
    "    return i\n",
    "\n",
    "def getNearestByHSV1(r, g, b): # input: rgb, coordinate\n",
    "    global lego_colors\n",
    "    h,s,v = getHSV_fromRGB(r,g,b)\n",
    "    h /= 360.\n",
    "    x,y,z = s*math.cos(2*math.pi*h)*v, s*math.sin(2*math.pi*h)*v, v\n",
    "    i = -1\n",
    "    m = 1e12\n",
    "    for idx, color in enumerate(lego_colors):\n",
    "        h1,s1,v1 = getHSV_fromRGB(int(color[1]), int(color[2]), int(color[3]))\n",
    "        h1 /= 360.\n",
    "        x1,y1,z1 = s1*math.cos(2*math.pi*h1)*v1, s1*math.sin(2*math.pi*h1)*v1, v1\n",
    "        t = (x1-x)**2 + (y1-y)**2 + (z1-z)**2\n",
    "        if t < m:\n",
    "            m = t\n",
    "            i = idx\n",
    "    return i\n",
    "\n",
    "def getNearestByYUV(r, g, b): # input: rgb\n",
    "    global lego_colors\n",
    "    y,u,v = getYUV_fromRGB(r,g,b)\n",
    "    i = -1\n",
    "    m = 1e9\n",
    "    for idx, color in enumerate(lego_colors):\n",
    "        y1,u1,v1 = getYUV_fromRGB(int(color[1]), int(color[2]), int(color[3]))\n",
    "        t = (y1-y)**2 + (u1-u)**2 + (v1-v)**2\n",
    "        if t < m:\n",
    "            m = t\n",
    "            i = idx\n",
    "    return i\n",
    "\n",
    "def getNearestByRGB(r, g, b):\n",
    "    global lego_colors\n",
    "    i = -1\n",
    "    m = 1e9\n",
    "    for idx, color in enumerate(lego_colors):\n",
    "        r1,g1,b1 = int(color[1]), int(color[2]), int(color[3])\n",
    "        t = (r1-r)**2 + (g1-g)**2 + (b1-b)**2\n",
    "        if t < m:\n",
    "            m = t\n",
    "            i = idx\n",
    "    return i\n",
    "\n",
    "def RGBtoHex(r,g,b):\n",
    "    r = int(r)\n",
    "    g = int(g)\n",
    "    b = int(b)\n",
    "    return '#' + \"%06x\" % (r*256*256 + g*256 + b)\n",
    "\n",
    "def getNearest(r,g,b):\n",
    "    nhsv = lego_colors[getNearestByHSV(r,g,b)]\n",
    "    nhsv1 = lego_colors[getNearestByHSV1(r,g,b)]\n",
    "    nyuv = lego_colors[getNearestByYUV(r,g,b)]\n",
    "    nrgb = lego_colors[getNearestByRGB(r,g,b)]\n",
    "    fig6 = plt.figure()\n",
    "    ax6 = fig6.add_subplot(111, aspect='equal')\n",
    "    for p in [\n",
    "        patches.Rectangle(\n",
    "            (0.0, 0.1), 0.2, 0.6,\n",
    "            facecolor=RGBtoHex(r,g,b)      # Default\n",
    "        ),\n",
    "        patches.Rectangle(\n",
    "            (0.2, 0.1), 0.2, 0.6,\n",
    "            facecolor=RGBtoHex(nhsv[1],nhsv[2],nhsv[3])     # No background\n",
    "        ),\n",
    "        patches.Rectangle(\n",
    "            (0.4, 0.1), 0.2, 0.6,\n",
    "            facecolor=RGBtoHex(nhsv1[1],nhsv1[2],nhsv1[3])     # No background\n",
    "        ),\n",
    "        patches.Rectangle(\n",
    "            (0.6, 0.1), 0.2, 0.6,\n",
    "            facecolor=RGBtoHex(nyuv[1],nyuv[2],nyuv[3])\n",
    "        ),\n",
    "        patches.Rectangle(\n",
    "            (0.8, 0.1), 0.2, 0.6,\n",
    "            facecolor=RGBtoHex(nrgb[1],nrgb[2],nrgb[3])\n",
    "        ),\n",
    "    ]:\n",
    "        ax6.add_patch(p)\n",
    "    #fig6.savefig('rect6.png', dpi=90, bbox_inches='tight')\n",
    "    #flg6.show()\n",
    "    plt.show()\n",
    "\n",
    "    #print('Type r,g,b value (with space separated): ')\n",
    "    #a = tuple(map(int, sys.stdin.readline().split()))\n",
    "\n",
    "    print 'original RGB: ', r,g,b\n",
    "    print 'by HSV: ', nhsv\n",
    "    print 'by HSV1: ', nhsv1\n",
    "    print 'by YUV: ', nyuv\n",
    "    print 'by RGB: ', nrgb\n",
    "    \n",
    "getNearest(240,230,175)\n",
    "getNearest(100,200,230)\n",
    "getNearest(75,210,30)\n",
    "getNearest(180,40,225)\n",
    "getNearest(150,200,35)\n",
    "'''\n",
    "http://peeron.com/cgi-bin/invcgis/colorguide.cgi\n",
    "http://matthiaseisen.com/pp/patterns/p0203/\n",
    "http://www.easyrgb.com/index.php?X=MATH\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
